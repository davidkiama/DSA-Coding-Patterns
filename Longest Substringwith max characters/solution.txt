 We can use a HashMap to remember the frequency of each character we 
 have processed. Here is how we will solve this problem:

First, we will insert characters from the beginning of the string 
until we have K distinct characters in the HashMap.

These characters will constitute our sliding window. We are asked 
to find the longest such window having no more than K distinct 
characters. We will remember the length of this window as the longest window so far.

After this, we will keep adding one character in the sliding window 
(i.e., slide the window ahead) in a stepwise fashion.

In each step, we will try to shrink the window from the beginning 
if the count of distinct characters in the HashMap is larger than K. 
We will shrink the window until we have no more than K distinct 
characters in the HashMap. This is needed as we intend to find the 
longest window.

While shrinking, we’ll decrement the character’s frequency going out of 
the window and remove it from the HashMap if its frequency becomes zero.

At the end of each step, we’ll check if the current window length is 
the longest so far, and if so, remember its length.




Time Complexity#
The above algorithm’s time complexity will be O(N), where N
is the number of characters in the input string. The outer for loop 
runs for all characters, and the inner while loop processes each 
character only once; therefore, the time complexity of the algorithm 
will be O(N+N), which is asymptotically equivalent to O(N)

.

Space Complexity#
The algorithm’s space complexity is O(K), as we will be storing a maximum of K+1
characters in the HashMap.
